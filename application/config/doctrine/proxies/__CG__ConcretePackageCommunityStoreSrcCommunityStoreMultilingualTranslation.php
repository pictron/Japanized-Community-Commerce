<?php

namespace DoctrineProxies\__CG__\Concrete\Package\CommunityStore\Src\CommunityStore\Multilingual;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Translation extends \Concrete\Package\CommunityStore\Src\CommunityStore\Multilingual\Translation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'tID', 'locale', 'originalText', 'translatedText', 'extendedText', 'pID', 'entityType', 'entityID'];
        }

        return ['__isInitialized__', 'tID', 'locale', 'originalText', 'translatedText', 'extendedText', 'pID', 'entityType', 'entityID'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Translation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTranslationID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationID', []);

        return parent::getTranslationID();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalText', []);

        return parent::getOriginalText();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginalText($originalText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginalText', [$originalText]);

        return parent::setOriginalText($originalText);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslatedText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslatedText', []);

        return parent::getTranslatedText();
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslatedText($translatedText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTranslatedText', [$translatedText]);

        return parent::setTranslatedText($translatedText);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtendedText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtendedText', []);

        return parent::getExtendedText();
    }

    /**
     * {@inheritDoc}
     */
    public function setExtendedText($extendedText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtendedText', [$extendedText]);

        return parent::setExtendedText($extendedText);
    }

    /**
     * {@inheritDoc}
     */
    public function setProductID($pid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductID', [$pid]);

        return parent::setProductID($pid);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductID', []);

        return parent::getProductID();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityType', []);

        return parent::getEntityType();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityType($entityType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityType', [$entityType]);

        return parent::setEntityType($entityType);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityID', []);

        return parent::getEntityID();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityID($entityID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityID', [$entityID]);

        return parent::setEntityID($entityID);
    }

    /**
     * {@inheritDoc}
     */
    public function save()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'save', []);

        return parent::save();
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', []);

        return parent::delete();
    }

}

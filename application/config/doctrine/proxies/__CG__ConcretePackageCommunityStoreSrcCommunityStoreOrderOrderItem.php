<?php

namespace DoctrineProxies\__CG__\Concrete\Package\CommunityStore\Src\CommunityStore\Order;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class OrderItem extends \Concrete\Package\CommunityStore\Src\CommunityStore\Order\OrderItem implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'oiID', 'pID', 'pvID', 'order', 'oiProductName', 'oiSKU', 'oiPricePaid', 'oiTax', 'oiTaxIncluded', 'oiTaxName', 'oiQty', 'oiQtyLabel'];
        }

        return ['__isInitialized__', 'oiID', 'pID', 'pvID', 'order', 'oiProductName', 'oiSKU', 'oiPricePaid', 'oiTax', 'oiTaxIncluded', 'oiTaxName', 'oiQty', 'oiQtyLabel'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (OrderItem $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getID', []);

        return parent::getID();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductName', []);

        return parent::getProductName();
    }

    /**
     * {@inheritDoc}
     */
    public function setProductName($oiProductName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductName', [$oiProductName]);

        return parent::setProductName($oiProductName);
    }

    /**
     * {@inheritDoc}
     */
    public function getSKU()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSKU', []);

        return parent::getSKU();
    }

    /**
     * {@inheritDoc}
     */
    public function setSKU($oiSKU)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSKU', [$oiSKU]);

        return parent::setSKU($oiSKU);
    }

    /**
     * {@inheritDoc}
     */
    public function getPricePaid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPricePaid', []);

        return parent::getPricePaid();
    }

    /**
     * {@inheritDoc}
     */
    public function setPricePaid($oiPricePaid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPricePaid', [$oiPricePaid]);

        return parent::setPricePaid($oiPricePaid);
    }

    /**
     * {@inheritDoc}
     */
    public function getTax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTax', []);

        return parent::getTax();
    }

    /**
     * {@inheritDoc}
     */
    public function setTax($oitax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTax', [$oitax]);

        return parent::setTax($oitax);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxIncluded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxIncluded', []);

        return parent::getTaxIncluded();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxIncluded($oiTaxIncluded)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxIncluded', [$oiTaxIncluded]);

        return parent::setTaxIncluded($oiTaxIncluded);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxName', []);

        return parent::getTaxName();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxName($oiTaxName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxName', [$oiTaxName]);

        return parent::setTaxName($oiTaxName);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantity', []);

        return parent::getQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function getQty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQty', []);

        return parent::getQty();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuantity($oiQty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuantity', [$oiQty]);

        return parent::setQuantity($oiQty);
    }

    /**
     * {@inheritDoc}
     */
    public function setQty($oiQty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQty', [$oiQty]);

        return parent::setQty($oiQty);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantityLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantityLabel', []);

        return parent::getQuantityLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function getQtyLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQtyLabel', []);

        return parent::getQtyLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuantityLabel($oiQtyLabel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuantityLabel', [$oiQtyLabel]);

        return parent::setQuantityLabel($oiQtyLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function setQtyLabel($oiQtyLabel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQtyLabel', [$oiQtyLabel]);

        return parent::setQtyLabel($oiQtyLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function setProductID($productid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductID', [$productid]);

        return parent::setProductID($productid);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductID', []);

        return parent::getProductID();
    }

    /**
     * {@inheritDoc}
     */
    public function setVariationID($variationID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVariationID', [$variationID]);

        return parent::setVariationID($variationID);
    }

    /**
     * {@inheritDoc}
     */
    public function getVariationID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVariationID', []);

        return parent::getVariationID();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubTotal', []);

        return parent::getSubTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductOptions', []);

        return parent::getProductOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductObject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductObject', []);

        return parent::getProductObject();
    }

    /**
     * {@inheritDoc}
     */
    public function save()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'save', []);

        return parent::save();
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', []);

        return parent::delete();
    }

}
